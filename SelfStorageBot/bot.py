import asyncio
import datetime
import logging
import os
import re
import json

from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import KeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types.message import ContentType
from aiogram.utils.exceptions import TelegramAPIError
from dotenv import load_dotenv
import aiogram.utils.markdown as fmt

import time
from datetime import date, timedelta
import pyqrcode
from geopy.distance import geodesic as GD

load_dotenv()
loop = asyncio.get_event_loop()
pay_token = os.getenv("PAY_TOKEN")
logging.basicConfig(level=logging.INFO)
token = os.getenv("BOT_KEY")
user_data = {}
bot = Bot(token=token, parse_mode=types.ParseMode.HTML)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage, loop=loop)

logging.basicConfig(
    level=logging.WARNING,
    filename='logs.log',
    filemode='w',
    format='%(asctime)s - [%(levelname)s] - %(funcName)s() - [line %(lineno)d] - %(message)s',
)


class FsmAdmin(StatesGroup):
    first_name = State()
    last_name = State()
    phone = State()
    passport = State()
    born = State()


@dp.message_handler(text='–í –Ω–∞—á–∞–ª–æ')
@dp.message_handler(text='–û—Ç–º–µ–Ω–∞')
@dp.message_handler(commands='start')
async def cmd_start(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é üó∫Ô∏è', request_location=True))
    keyboard.add(KeyboardButton('–í—ã–±—Ä–∞—Ç—å —Ä—É–∫–∞–º–∏ ü§¶'))

    if message.text == '–í –Ω–∞—á–∞–ª–æ':
        await message.answer("–†–∞–¥—ã –≤–∏–¥–µ—Ç—å –í–∞—Å —Å–Ω–æ–≤–∞! –ù–∞—á–Ω–µ–º! \n"
                             "–ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–Ω–æ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞! "
                             "–ò –º—ã —Å–Ω–æ–≤–∞ –ø—Ä–µ–¥–ª–æ–∂–∏–º –±–ª–∏–∂–∞–π—à–∏–π —Å–∫–ª–∞–¥",
                             reply_markup=keyboard)
    else:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! üñê\n\n –Ø –ø–æ–º–æ–≥—É –≤–∞–º –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –ª–∏—á–Ω—É—é —è—á–µ–π–∫—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–µ—â–µ–π.\n"
                             "–ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞,"
                             " —á—Ç–æ–±—ã –≤—ã –≤—ã–±—Ä–∞–ª–∏ –±–ª–∏–∂–∞–π—à–∏–π —Å–∫–ª–∞–¥!",
                             reply_markup=keyboard)
    await bot.delete_message(message.from_user.id, message.message_id)


@dp.message_handler(text='–í—ã–±—Ä–∞—Ç—å —Ä—É–∫–∞–º–∏ ü§¶')
async def cmd_start(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    buttons = [
        "–º–µ—Ç—Ä–æ –ê–Ω–∏–Ω–æ",
        "–º–µ—Ç—Ä–æ –ö–∏—Ç–∞–π-–ì–æ—Ä–æ–¥",
        "–º–µ—Ç—Ä–æ –í–î–ù–•",
        "–º–µ—Ç—Ä–æ –ú–∏—Ç–∏–Ω–æ",
        "–º–µ—Ç—Ä–æ –°–ø–∞—Ä—Ç–∞–∫",
        "–º–µ—Ç—Ä–æ –°–æ–∫–æ–ª",
    ]
    keyboard.add(*buttons)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å —Å–∫–ª–∞–¥–∞:', reply_markup=keyboard)


@dp.message_handler(content_types=['location'])
async def handle_location(message: types.Location):
    user_data['lat'] = message.location.latitude
    user_data['lon'] = message.location.longitude
    user_location = (user_data['lat'], user_data['lon'])
    location_anino = (55.581818, 37.594978)
    location_chinatown = (55.75634, 37.63002)
    location_vdnh = (55.82177, 37.64107)
    location_mitino = (55.84589, 37.35909)
    location_spartak = (55.8176765, 37.4345436)
    location_sokol = (55.80518, 37.51495)
    distance_anino = round(GD(user_location, location_anino).km)
    distance_chinatown = round(GD(user_location, location_chinatown).km)
    distance_vdnh = round(GD(user_location, location_vdnh).km)
    distance_mitino = round(GD(user_location, location_mitino).km)
    distance_spartak = round(GD(user_location, location_spartak).km)
    distance_sokol = round(GD(user_location, location_sokol).km)

    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, one_time_keyboard=True)

    buttons = [
        f"–º–µ—Ç—Ä–æ –ê–Ω–∏–Ω–æ \n({distance_anino} –∫–º –æ—Ç –≤–∞—Å) üòâ",
        f"–º–µ—Ç—Ä–æ –ö–∏—Ç–∞–π-–ì–æ—Ä–æ–¥ \n({distance_chinatown} –∫–º –æ—Ç –≤–∞—Å)",
        f"–º–µ—Ç—Ä–æ –í–î–ù–• \n({distance_vdnh} –∫–º –æ—Ç –≤–∞—Å)",
        f"–º–µ—Ç—Ä–æ –ú–∏—Ç–∏–Ω–æ \n({distance_mitino} –∫–º –æ—Ç –≤–∞—Å)",
        f"–º–µ—Ç—Ä–æ –°–ø–∞—Ä—Ç–∞–∫ \n({distance_spartak} –∫–º –æ—Ç –≤–∞—Å)",
        f"–º–µ—Ç—Ä–æ –°–æ–∫–æ–ª \n({distance_sokol} –∫–º –æ—Ç –≤–∞—Å)",
    ]
    keyboard.add(*buttons)
    await bot.delete_message(message.from_user.id, message.message_id)
    await message.answer('–ö–∞–∫–æ–π –∞–¥—Ä–µ—Å –≤–∞–º –ø–æ–¥—Ö–æ–¥–∏—Ç?', reply_markup=keyboard)


@dp.message_handler(text_contains="–º–µ—Ç—Ä–æ")
async def sklad_1_answer(message: types.Message):
    user_data['adress'] = message.text

    keyboard = types.InlineKeyboardMarkup(row_width=2, resize_keyboard=True)

    buttons = [
        types.InlineKeyboardButton(text='—Å–µ–∑–æ–Ω–Ω—ã–µ –≤–µ—â–∏', callback_data='—Å–µ–∑–æ–Ω–Ω—ã–µ –≤–µ—â–∏'),
        types.InlineKeyboardButton(text='–¥—Ä—É–≥–æ–µ', callback_data='–¥—Ä—É–≥–æ–µ')
    ]
    keyboard.add(*buttons)
    await bot.delete_message(message.from_user.id, message.message_id)
    await message.answer("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Ö—Ä–∞–Ω–∏—Ç—å?:", reply_markup=keyboard)
    await message.answer('üíÅ‚Äç‚ôÄÔ∏è', reply_markup=types.ReplyKeyboardRemove())


@dp.callback_query_handler(text='—Å–µ–∑–æ–Ω–Ω—ã–µ –≤–µ—â–∏')
async def send_msg(call: types.CallbackQuery):
    buttons = [
        types.InlineKeyboardButton(text='–õ—ã–∂–∏', callback_data='–õ—ã–∂–∏'),
        types.InlineKeyboardButton(text='–°–Ω–æ—É–±–æ—Ä–¥', callback_data='–°–Ω–æ—É–±–æ—Ä–¥'),
        types.InlineKeyboardButton(text='–í–µ–ª–æ—Å–∏–ø–µ–¥', callback_data='–í–µ–ª–æ—Å–∏–ø–µ–¥'),
        types.InlineKeyboardButton(text='–ö–æ–ª–µ—Å–∞', callback_data='–ö–æ–ª–µ—Å–∞'),
    ]

    keyboard = types.InlineKeyboardMarkup(row_width=2, resize_keyboard=True)
    keyboard.add(*buttons)
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=keyboard)
    await call.answer()


@dp.callback_query_handler(text='–õ—ã–∂–∏')
@dp.callback_query_handler(text='–°–Ω–æ—É–±–æ—Ä–¥')
@dp.callback_query_handler(text='–í–µ–ª–æ—Å–∏–ø–µ–¥')
@dp.callback_query_handler(text='–ö–æ–ª–µ—Å–∞')
async def seasonal_choose_quantity(call: types.CallbackQuery):
    user_data['item'] = call.data
    await call.message.answer(
        fmt.text(
            fmt.text(fmt.hunderline("–£—Å–ª–æ–≤–∏—è:\n\n")),
            fmt.text('1 –ª—ã–∂–∏ - 100 —Ä/–Ω–µ–¥–µ–ª—è –∏–ª–∏ 300 —Ä/–º–µ—Å\n'),
            fmt.text('1 —Å–Ω–æ—É–±–æ—Ä–¥ - 100 —Ä/–Ω–µ–¥–µ–ª—è –∏–ª–∏ 300 —Ä/–º–µ—Å\n'),
            fmt.text('4 –∫–æ–ª–µ—Å–∞ - 200 —Ä/–º–µ—Å\n'),
            fmt.text('1 –≤–µ–ª–æ—Å–∏–ø–µ–¥ - 150 —Ä/ –Ω–µ–¥–µ–ª—è –∏–ª–∏ 400 —Ä/–º–µ—Å\n'),
        ),
        reply_markup=types.ReplyKeyboardRemove()
    )
    buttons = [
        types.InlineKeyboardButton(
            text=f'{cell} —à—Ç', callback_data=f'{cell} —à—Ç') for cell in range(1, 11)
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=5, resize_keyboard=True)
    keyboard.add(*buttons)
    await call.message.answer("–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—â–µ–π –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è.", reply_markup=keyboard)
    await call.answer()


@dp.callback_query_handler(text_contains='—à—Ç')
async def seasonal_choose_period(call: types.CallbackQuery):
    user_data['quantity'] = call.data
    buttons = [
        types.InlineKeyboardButton(text='1 –Ω–µ–¥–µ–ª—è', callback_data='1 –Ω–µ–¥–µ–ª—è'),
        types.InlineKeyboardButton(text='2 –Ω–µ–¥–µ–ª–∏', callback_data='2 –Ω–µ–¥–µ–ª–∏'),
        types.InlineKeyboardButton(text='3 –Ω–µ–¥–µ–ª–∏', callback_data='3 –Ω–µ–¥–µ–ª–∏'),
        types.InlineKeyboardButton(text='1 –º–µ—Å—è—Ü', callback_data='1 –º–µ—Å—è—Ü'),
        types.InlineKeyboardButton(text='2 –º–µ—Å—è—Ü–∞', callback_data='2 –º–µ—Å—è—Ü–∞'),
        types.InlineKeyboardButton(text='3 –º–µ—Å—è—Ü–∞', callback_data='3 –º–µ—Å—è—Ü–∞'),
        types.InlineKeyboardButton(text='4 –º–µ—Å—è—Ü–∞', callback_data='4 –º–µ—Å—è—Ü–∞'),
        types.InlineKeyboardButton(text='5 –º–µ—Å—è—Ü–µ–≤', callback_data='5 –º–µ—Å—è—Ü–µ–≤'),
        types.InlineKeyboardButton(text='6 –º–µ—Å—è—Ü–µ–≤', callback_data='6 –º–µ—Å—è—Ü–µ–≤'),
    ]

    keyboard = types.InlineKeyboardMarkup(row_width=3, resize_keyboard=True)
    keyboard.add(*buttons)
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ —Ö—Ä–∞–Ω–µ–Ω–∏—è.", reply_markup=keyboard)
    await bot.delete_message(call.from_user.id, call.message.message_id)
    await call.answer()


@dp.callback_query_handler(text='1 –Ω–µ–¥–µ–ª—è')
@dp.callback_query_handler(text='2 –Ω–µ–¥–µ–ª–∏')
@dp.callback_query_handler(text='3 –Ω–µ–¥–µ–ª–∏')
@dp.callback_query_handler(text='1 –º–µ—Å—è—Ü')
@dp.callback_query_handler(text='2 –º–µ—Å—è—Ü–∞')
@dp.callback_query_handler(text='3 –º–µ—Å—è—Ü–∞')
@dp.callback_query_handler(text='4 –º–µ—Å—è—Ü–∞')
@dp.callback_query_handler(text='5 –º–µ—Å—è—Ü–µ–≤')
@dp.callback_query_handler(text='6 –º–µ—Å—è—Ü–µ–≤')
async def seasonal_book(call: types.CallbackQuery):
    user_data['rent'] = call.data
    periods = {
        '1 –Ω–µ–¥–µ–ª—è': 7,
        '2 –Ω–µ–¥–µ–ª–∏': 14,
        '3 –Ω–µ–¥–µ–ª–∏': 21,
        '1 –º–µ—Å—è—Ü': 31,
        '2 –º–µ—Å—è—Ü–∞': 61,
        '3 –º–µ—Å—è—Ü–∞': 92,
        '4 –º–µ—Å—è—Ü–∞': 122,
        '5 –º–µ—Å—è—Ü–µ–≤': 153,
        '6 –º–µ—Å—è—Ü–µ–≤': 184,
    }
    prices = {
        '–õ—ã–∂–∏': {
            '1 –Ω–µ–¥–µ–ª—è': 100,
            '2 –Ω–µ–¥–µ–ª–∏': 200,
            '3 –Ω–µ–¥–µ–ª–∏': 300,
            '1 –º–µ—Å—è—Ü': 300,
            '2 –º–µ—Å—è—Ü–∞': 600,
            '3 –º–µ—Å—è—Ü–∞': 900,
            '4 –º–µ—Å—è—Ü–∞': 1200,
            '5 –º–µ—Å—è—Ü–µ–≤': 1500,
            '6 –º–µ—Å—è—Ü–µ–≤': 1800,
        },
        '–í–µ–ª–æ—Å–∏–ø–µ–¥': {
            '1 –Ω–µ–¥–µ–ª—è': 150,
            '2 –Ω–µ–¥–µ–ª–∏': 300,
            '3 –Ω–µ–¥–µ–ª–∏': 450,
            '1 –º–µ—Å—è—Ü': 400,
            '2 –º–µ—Å—è—Ü–∞': 800,
            '3 –º–µ—Å—è—Ü–∞': 1200,
            '4 –º–µ—Å—è—Ü–∞': 1600,
            '5 –º–µ—Å—è—Ü–µ–≤': 2000,
            '6 –º–µ—Å—è—Ü–µ–≤': 2400,
        },
        '–°–Ω–æ—É–±–æ—Ä–¥': {
            '1 –Ω–µ–¥–µ–ª—è': 100,
            '2 –Ω–µ–¥–µ–ª–∏': 200,
            '3 –Ω–µ–¥–µ–ª–∏': 300,
            '1 –º–µ—Å—è—Ü': 300,
            '2 –º–µ—Å—è—Ü–∞': 600,
            '3 –º–µ—Å—è—Ü–∞': 900,
            '4 –º–µ—Å—è—Ü–∞': 1200,
            '5 –º–µ—Å—è—Ü–µ–≤': 1500,
            '6 –º–µ—Å—è—Ü–µ–≤': 1800,
        },
        '–ö–æ–ª–µ—Å–∞': {
            '1 –º–µ—Å—è—Ü': 200,
            '2 –º–µ—Å—è—Ü–∞': 400,
            '3 –º–µ—Å—è—Ü–∞': 600,
            '4 –º–µ—Å—è—Ü–∞': 800,
            '5 –º–µ—Å—è—Ü–µ–≤': 1000,
            '6 –º–µ—Å—è—Ü–µ–≤': 1200,
        },
    }
    period = user_data['rent']
    period_days = periods[period]
    storage = user_data['adress']
    item = user_data['item']
    quantity = user_data['quantity']
    quantity = re.findall(r'\d+', quantity)[0]

    total_price = int(quantity) * prices[item][period]
    user_data['period_days'] = period_days
    user_data['total_price'] = total_price

    buttons = [
        types.InlineKeyboardButton(
            text="–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data='–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å')
    ]
    keyboard = types.InlineKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*buttons)
    await call.message.answer(
        fmt.text(
            fmt.text(fmt.hunderline("–í—ã –≤—ã–±—Ä–∞–ª–∏:")),
            fmt.text(f"\n–ß—Ç–æ —Ö—Ä–∞–Ω–∏–º:   {item} "),
            fmt.text(f"\n–°—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã:   {period} "),
            fmt.text(f"\n–ü–æ –∞–¥—Ä–µ—Å—É:   {storage}"),
            fmt.text(f"\n–°—Ç–æ–∏–º–æ—Å—Ç—å:   {total_price} —Ä—É–±–ª–µ–π"), sep="\n"
        ), reply_markup=keyboard)
    await call.answer()


@dp.callback_query_handler(text='–¥—Ä—É–≥–æ–µ')
async def send_msg_other(call: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup(row_width=2, resize_keyboard=True)
    buttons = [
        types.InlineKeyboardButton(
            text=f'{month + 1} –∫–≤ –º ({cell} —Ä)',
            callback_data=f'{month + 1, cell}w') for month, cell in enumerate(range(599, 1949 + 1, 150))
    ]
    keyboard.add(*buttons)
    await bot.delete_message(call.from_user.id, call.message.message_id)
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —è—á–µ–π–∫–∏.\n–¶–µ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞ –∑–∞ –æ–¥–∏–Ω –º–µ—Å—è—Ü:", reply_markup=keyboard)
    await call.answer()


@dp.callback_query_handler(text_contains='w')
async def send_date(call: types.CallbackQuery):
    user_data['size_cell_price'] = re.sub(r'[()w]', '', call.data).split(',')
    buttons = [
        types.InlineKeyboardButton(
            text=f"{month} –º–µ—Å: {month * int(user_data['size_cell_price'][1])}—Ä",
            callback_data=f"{month, month * int(user_data['size_cell_price'][1])}h") for month in range(1, 13)
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=2, resize_keyboard=True)
    keyboard.add(*buttons)
    await bot.delete_message(call.from_user.id, call.message.message_id)
    await call.message.answer(f"–í–∞—à –≤—ã–±–æ—Ä: —Å–∫–ª–∞–¥ {user_data['size_cell_price'][0]} –∫–≤ –º")
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å:", reply_markup=keyboard)
    await call.answer()


@dp.callback_query_handler(text_contains='h')
async def choice_month(call: types.CallbackQuery):
    user_data['rent'] = re.sub(r'[()h]', '', call.data).split(',')
    user_data['total_price'] = user_data['rent'][1]
    period_days = int(user_data['rent'][0]) * 30.5
    user_data['period_days'] = period_days
    user_data['total_price'] = user_data['total_price']
    user_data['quantity'] = f"–°–∫–ª–∞–¥ –æ–±—ä–µ–º–æ–º {user_data['size_cell_price'][0]} –∫–≤ –º"
    user_data['item'] = '–¥—Ä—É–≥–æ–µ'
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    if 1 < int(user_data['rent'][0]):
        keyboard.add(KeyboardButton(text="—ç—Ç–æ –º–∞–º–∏–Ω —Å–º–∞—Ä—Ç—Ñ–æ–Ω —É –º–µ–Ω—è –Ω–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥–∞"))
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:", reply_markup=keyboard)
        await call.answer()
    else:
        keyboard_lol = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        keyboard_lol.add(KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –ø—Ä–æ–º–æ–∫–æ–¥–∞"))
        await call.message.answer(f"–°—Ä–æ–∫ {user_data['rent'][0]} –º–µ—Å—è—Ü", reply_markup=keyboard_lol)


@dp.message_handler(text='storage2022')
@dp.message_handler(text='storage15')
@dp.message_handler(text='—ç—Ç–æ –º–∞–º–∏–Ω —Å–º–∞—Ä—Ç—Ñ–æ–Ω —É –º–µ–Ω—è –Ω–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥–∞')
@dp.message_handler(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –ø—Ä–æ–º–æ–∫–æ–¥–∞")
async def promocod(message: types.Message):
    non_discont = user_data['total_price']
    if message.text == "storage2022":
        if 6 <= int(user_data['rent'][0]):
            discont = float(user_data['total_price']) * 0.2
            user_data['total_price'] = float(user_data['total_price']) - float(user_data['total_price']) * 0.2
            await bot.send_message(
                message.from_user.id, f"–ü—Ä–æ–º–æ–∫–æ–¥: {message.text}",
                reply_markup=types.ReplyKeyboardRemove())
        else:
            await bot.send_message(message.from_user.id,
                                   "–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Å—Ä–æ–∫—É",
                                   reply_markup=types.ReplyKeyboardRemove(),
                                   )

    elif message.text == "storage15":
        if 1 < int(user_data['rent'][0]) < 6:
            discont = float(user_data['total_price']) * 0.15
            user_data['total_price'] = float(user_data['total_price']) - float(user_data['total_price']) * 0.15
            await bot.send_message(
                message.from_user.id, f"–ü—Ä–æ–º–æ–∫–æ–¥: {message.text}",
                reply_markup=types.ReplyKeyboardRemove(),
            )
        else:
            await bot.send_message(message.from_user.id,
                                   "–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Å—Ä–æ–∫—É",
                                   reply_markup=types.ReplyKeyboardRemove(),
                                   )

    elif message.text == "—ç—Ç–æ –º–∞–º–∏–Ω —Å–º–∞—Ä—Ç—Ñ–æ–Ω —É –º–µ–Ω—è –Ω–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥–∞" or message.text == "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –ø—Ä–æ–º–æ–∫–æ–¥–∞":
        discont = 0
        user_data['total_price'] = user_data['total_price']
        await bot.send_message(
            message.from_user.id, f"–ë–µ–∑ –ø—Ä–æ–º–æ–∫–æ–¥–∞: ",
            reply_markup=types.ReplyKeyboardRemove(),
        )

    buttons = [
        types.InlineKeyboardButton(
            text="–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data='–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å')
    ]
    keyboard = types.InlineKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*buttons)
    await bot.delete_message(message.from_user.id, message.message_id)
    try:
        await message.answer(
            fmt.text(
                fmt.text(fmt.hunderline("–í—ã –≤—ã–±—Ä–∞–ª–∏:")),
                fmt.text(f"\n–†–∞–∑–º–µ—Ä —è—á–µ–π–∫–∏:   {user_data['size_cell_price'][0]} –∫–≤ –º"),
                fmt.text(f"\n–°—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã:   {user_data['rent'][0]} –º–µ—Å—è—Ü–µ–≤"),
                fmt.text(f"\n–ü–æ –∞–¥—Ä–µ—Å—É:   {user_data['adress']}"),
                fmt.text(f"\n–°—Ç–æ–∏–º–æ—Å—Ç—å –±–µ–∑ —Å–∫–∏–¥–∫–∏:   {non_discont} —Ä—É–±–ª–µ–π"),
                fmt.text(f"\n–°–∫–∏–¥–∫–∞:   {int(discont)} —Ä—É–±–ª–µ–π"),
                fmt.text(f"\n–°—Ç–æ–∏–º–æ—Å—Ç—å –∏—Ç–æ–≥–æ:   {int(user_data['total_price'])} —Ä—É–±–ª–µ–π"), sep="\n",
            ), reply_markup=keyboard)
    except (TypeError, TelegramAPIError) as exc:
        logging.warning(exc)


@dp.callback_query_handler(text='–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å')
async def registration(call: types.CallbackQuery):
    user = call.message["chat"]["first_name"]
    user_id = str(call.from_user.id)
    try:
        with open('clients.json') as f:
            data = json.load(f)
            if any([user_id in _ for _ in data]):
                keyboard_ok = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                key_8 = types.KeyboardButton(text='–û–ø–ª–∞—Ç–∏—Ç—å')
                key_9 = types.KeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ')
                key_10 = types.KeyboardButton(text='–û—Ç–º–µ–Ω–∞')
                keyboard_ok.add(key_8).add(key_9).add(key_10)
                await call.message.answer(f' {user}, –≤—ã —É–∂–µ —É –Ω–∞—Å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞! '
                                          '–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –≤–∞—à–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ —Å—Ä–∞–∑—É –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ',
                                          reply_markup=keyboard_ok)
                await call.answer()
            else:
                keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, one_time_keyboard=True)
                buttons = [
                    "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è",
                    "–û—Ç–º–µ–Ω–∞",
                ]
                keyboard.add(*buttons)
                await call.message.answer(f' {user}, –≤—ã —É –Ω–∞—Å –≤–ø–µ—Ä–≤—ã–µ? –î–∞–≤–∞–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è.',
                                          reply_markup=keyboard)
    except:
        keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, one_time_keyboard=True)
        buttons = [
            "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è",
            "–û—Ç–º–µ–Ω–∞",
        ]
        keyboard.add(*buttons)
        await call.message.answer(f' {user}, –≤—ã —É –Ω–∞—Å –≤–ø–µ—Ä–≤—ã–µ? –î–∞–≤–∞–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è.', reply_markup=keyboard)


@dp.message_handler(text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
@dp.message_handler(text="–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
async def logging(message: types.Message):
    user_id = message.from_user.id
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, one_time_keyboard=True)
    buttons = [
        "–ü—Ä–∏–Ω—è—Ç—å",
        "–û—Ç–∫–∞–∑–∞—Ç—å—Å—è",
    ]
    keyboard.add(*buttons)
    doc = open('pd.pdf', 'rb')
    await bot.send_document(user_id, doc)
    await bot.send_message(
        user_id,
        "–î–ª—è –∑–∞–∫–∞–∑–∞ –Ω—É–∂–Ω–æ –í–∞—à–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å.",
        reply_markup=keyboard,
    )


@dp.message_handler(text='–û–ø–ª–∞—Ç–∏—Ç—å')
async def pay(message: types.Message):
    PRICE = types.LabeledPrice(label='–°–∫–ª–∞–¥', amount=30000)
    # PRICE = types.LabeledPrice(label='–°–∫–ª–∞–¥', amount=user_data['total_price'])
    if pay_token.split(':')[1] == 'TEST':
        await bot.send_message(message.from_user.id, '–°–∫–ª–∞–¥ –≤ –ú–æ—Å–∫–≤–µ-1')
        await bot.send_invoice(
            message.from_user.id,
            title='–°–∫–ª–∞–¥ –≤ –ú–æ—Å–∫–≤–µ',
            description='–°–∫–ª–∞–¥ –≤ –ú–æ—Å–∫–≤–µ –æ—á–µ–Ω—å, –æ—á–µ–Ω—å –Ω—É–∂–Ω–∞—è —à—Ç—É–∫–∞',
            provider_token=pay_token,
            currency='rub',
            photo_url='https://d.radikal.ru/d42/2111/76/bc089db2ed4d.jpg',
            photo_height=512,
            photo_width=512,
            photo_size=512,
            is_flexible=False,
            prices=[PRICE],
            start_parameter='storage',
            payload='some-invoice'
        )


@dp.pre_checkout_query_handler()
async def precheck(pre_checkout_query: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


@dp.message_handler(content_types=ContentType.SUCCESSFUL_PAYMENT)
async def process_buynd(message: types.Message):
    if message.successful_payment.invoice_payload == 'some-invoice':
        keyboard_qr = types.InlineKeyboardMarkup(resize_keyboard=True)
        key = types.InlineKeyboardButton(text='–ü–æ–ª—É—á–∏—Ç—å QR —á–µ–∫', callback_data='QR')
        keyboard_qr.add(key)
        await bot.send_message(message.from_user.id, '–û–ø–ª–∞—á–µ–Ω–æ!', reply_markup=keyboard_qr)


@dp.callback_query_handler(text='QR')
async def send_qrcode(call: types.CallbackQuery):
    timestr = time.strftime("%Y%m%d-%H%M%S")
    filename = f'{call.message.chat.id}_{timestr}.png'
    images_dir = os.path.join(os.getcwd(), 'QR')
    os.makedirs(images_dir, exist_ok=True)
    filepath = os.path.join(images_dir, filename)
    code = f'{timestr}_{call.message.chat.id}_'
    url = pyqrcode.create(code)
    url.png(filepath, scale=15)
    today = date.today()
    storage_date_end = today + timedelta(days=user_data['period_days'])
    storage_date_end = storage_date_end.strftime("%d.%m.%Y")
    storage_date_start = today.strftime("%d.%m.%Y")
    quantity = user_data['quantity']
    quantity = re.findall(r'\d+', quantity)[0]
    user_data['period_days'] = f'{storage_date_start}-{storage_date_end}'

    user_id = str(call.message.chat.id)
    try:
        with open('orders.json') as f:
            data = json.load(f)
        for client in data:
            if user_id in client:
                client[user_id].append(user_data)
                with open('orders.json', 'w') as f:
                    json.dump(data, f, ensure_ascii=False, default=str)
            else:
                orders = []
                order = {}
                order[call.message.chat.id] = []
                order[call.message.chat.id].append(user_data)
                orders.append(order)
                with open('orders.json', 'w') as file:
                    json.dump(orders, file, ensure_ascii=False, default=str)
    except:
        orders = []
        order = {}
        order[call.message.chat.id] = []
        order[call.message.chat.id].append(user_data)
        orders.append(order)
        with open('orders.json', 'w') as file:
            json.dump(orders, file, ensure_ascii=False, default=str)

    await call.message.answer(
        f'–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω –∏ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω!\n –í–æ—Ç –≤–∞—à —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –∫–ª—é—á –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–∞—à–µ–º—É –ª–∏—á–Ω–æ–º—É —Å–∫–ª–∞–¥—É.\n'
        f'–í—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ø–∞—Å—Ç—å –Ω–∞ —Å–∫–ª–∞–¥ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è –≤ –ø–µ—Ä–∏–æ–¥:\n —Å {storage_date_start} –ø–æ {storage_date_end}'
    )
    photo = open(filepath, 'rb')
    await bot.send_photo(chat_id=call.message.chat.id, photo=photo)
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, one_time_keyboard=True)
    keyboard.add(KeyboardButton(text="–í –Ω–∞—á–∞–ª–æ")).add(KeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑—ã"))
    await bot.delete_message(call.from_user.id, call.message.message_id)
    await bot.send_message(call.from_user.id, '–ï—â–µ –∑–∞–∫–∞–∑?', reply_markup=keyboard)


@dp.message_handler(text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑—ã')
async def show_orders(message: types.Message):
    user_id = str(message.chat.id)
    with open('orders.json') as f:
        data = json.load(f)
    await message.answer('–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:')
    for client in data:
        if user_id in client:
            user_data = client[user_id]
            for i, order in enumerate(user_data, start=1):
                adress = order['adress']
                quantity = order['quantity']
                item = order['item']
                period_days = order['period_days']
                total_price = order['total_price']
                await message.answer(
                    f'–ó–∞–∫–∞–∑ ‚Ññ {i}\n–ê–¥—Ä–µ—Å: {adress}\n–†–∞–∑–¥–µ–ª: {item}\n{quantity}\n–°—Ä–æ–∫: {period_days}\n–°—É–º–º–∞ - {total_price} —Ä—É–±.')
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, one_time_keyboard=True)
    keyboard.add(KeyboardButton(text="–í –Ω–∞—á–∞–ª–æ")).add(KeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑—ã"))
    await bot.delete_message(message.from_user.id, message.message_id)
    await bot.send_message(message.from_user.id, '–ï—â–µ –∑–∞–∫–∞–∑?', reply_markup=keyboard)


@dp.message_handler(state=None)
async def begin(message: types.Message):
    if message.text == '–ü—Ä–∏–Ω—è—Ç—å':
        await FsmAdmin.first_name.set()
        await bot.send_message(message.from_user.id, '–£–∫–∞–∂–∏—Ç–µ –∏–º—è')
    elif message.text == '–û—Ç–∫–∞–∑–∞—Ç—å—Å—è':
        user_id = message.from_user.id
        keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, one_time_keyboard=True)
        keyboard.add(KeyboardButton(text="–í –Ω–∞—á–∞–ª–æ"))
        await bot.send_message(
            user_id,
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –±–µ–∑ —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑—ã –Ω–µ–≤–æ–∑–º–æ–∂–Ω—ã.", reply_markup=keyboard
        )


@dp.message_handler(state=FsmAdmin.first_name)
async def first_name(message: types.Message, state: FSMContext):
    name = re.findall(r"\b[–ê-–Ø–∞-—è]{1,15}\b", message.text, flags=re.I)
    if not name:
        await bot.send_message(message.from_user.id,
                               '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∏—Ä–∏–ª–∏—Ü—É, –ª–∏–±–æ –ø—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ (–Ω–µ –±–æ–ª–µ–µ 15)')
    else:
        async with state.proxy() as data:
            data["first_name"] = message.text
        await FsmAdmin.next()
        await bot.send_message(message.from_user.id, '–£–∫–∞–∂–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é')


@dp.message_handler(state=FsmAdmin.last_name)
async def last_name(message: types.Message, state: FSMContext):
    name = re.findall(r"\b[–ê-–Ø–∞-—è]{1,15}\b", message.text, flags=re.I)
    if not name:
        await bot.send_message(message.from_user.id,
                               '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∏—Ä–∏–ª–∏—Ü—É, –ª–∏–±–æ –ø—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ (–Ω–µ –±–æ–ª–µ–µ 15)',
                               )
    else:
        async with state.proxy() as data:
            data["last_name"] = message.text

        keyboard_contact = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        key_1 = types.KeyboardButton(text='–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º', request_contact=True)
        keyboard_contact.add(key_1)
        await FsmAdmin.next()
        await bot.send_message(message.from_user.id, '–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: X–•–•–•–•–•–•–•–•–•')
        # await bot.send_message(message.from_user.id, '–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', reply_markup=keyboard_contact)


@dp.message_handler(state=FsmAdmin.phone)
async def phone(message: types.Message, state: FSMContext):
    phone = re.findall(r"\b[\d+]{10}\b", message.text, flags=re.I)
    if not phone:
        await message.answer('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –ª–∏–±–æ –ø—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ (10 —Ü–∏—Ñ—Ä)')
    else:
        async with state.proxy() as data:
            data["phone"] = message.text
        await FsmAdmin.next()
        await message.answer('–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –•–•–•–• –•–•–•–•–•–•')


@dp.message_handler(state=FsmAdmin.passport)
async def passport(message: types.Message, state: FSMContext):
    passp = re.findall(r"[\d+]{4}\s[\d+]{6}", message.text, flags=re.I)
    if not passp:
        await message.answer('–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –•–•–•–• –•–•–•–•–•–•')
    else:
        async with state.proxy() as data:
            data["passport"] = message.text
            data["id"] = message.from_user.id
        await FsmAdmin.next()
        await message.answer('–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –•–•.–•–•.–•–•–•–•')


@dp.message_handler(state=FsmAdmin.born)
async def born(message: types.Message, state: FSMContext):
    await bot.send_message(message.from_user.id, message.text)
    born = re.findall(r"[\d+]{2}.[\d+]{2}.[\d+]{4}", message.text, flags=re.I)
    if not born:
        await message.answer('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –•–•.–•–•.–•–•–•–•')
    else:
        year = datetime.datetime.today() - datetime.datetime.strptime(message.text, '%d.%m.%Y')
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –•–•.–•–•.–•–•–•–•')
        year_old = year.days // 365
        if 14 < year_old < 100:
            async with state.proxy() as data:
                data["born"] = message.text
                data["id"] = message.from_user.id
            try:
                with open('clients.json') as f:
                    file_data = json.load(f)
                    file_data.append(data)
                with open('clients.json', 'w') as file:
                    json.dump(file_data, file, ensure_ascii=False, default=str)
            except:
                clients = []
                clients.append(data)
                with open('clients.json', 'w') as file:
                    json.dump(clients, file, ensure_ascii=False, default=str)

            keyboard_ok = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            key_8 = types.KeyboardButton(text='–û–ø–ª–∞—Ç–∏—Ç—å')
            key_9 = types.KeyboardButton(text='–û—Ç–º–µ–Ω–∞')
            keyboard_ok.add(key_8).add(key_9)
            await bot.send_message(message.from_user.id, '–ì–æ—Ç–æ–≤–æ!', reply_markup=keyboard_ok)
            await state.finish()
        else:
            await message.answer('–ù–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–π –≤–æ–∑—Ä–∞—Å—Ç. –í–∞–º –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 14 –∏ –Ω–µ –±–æ–ª–µ–µ 100 –ª–µ—Ç')
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –•–•.–•–•.–•–•–•–•')


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
